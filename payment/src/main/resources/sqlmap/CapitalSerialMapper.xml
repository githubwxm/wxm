<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.all580.payment.dao.CapitalSerialMapper">
    <resultMap id="BaseResultMap" type="com.all580.payment.entity.CapitalSerial">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="ref_id" jdbcType="VARCHAR" property="ref_id"/>
        <result column="ref_type" jdbcType="INTEGER" property="ref_type"/>
        <result column="capital_id" jdbcType="INTEGER" property="capital_id"/>
        <result column="old_balance" jdbcType="INTEGER" property="old_balance"/>
        <result column="old_can_cash" jdbcType="INTEGER" property="old_can_cash"/>
        <result column="new_balance" jdbcType="INTEGER" property="new_balance"/>
        <result column="new_can_cash" jdbcType="INTEGER" property="new_can_cash"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="create_time"/>
        <result column="summary" jdbcType="TIMESTAMP" property="summary"/>
        <result column="balance_type" jdbcType="INTEGER" property="balance_type"/>
        <result column="can_cash_type" jdbcType="INTEGER" property="can_cash_type"/>

    </resultMap>
    <sql id="Base_Column_List">
    id, ref_id, ref_type, capital_id, old_balance, old_can_cash, new_balance, new_can_cash, 
    create_time,summary
  </sql>

    <select id="selectSerialNumExists"  resultType="java.lang.Integer">
        select count(1) from t_capital_serial where ref_type=#{type} and ref_id=#{serial_num};
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_capital_serial
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_capital_serial
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.all580.payment.entity.CapitalSerial">
        insert into t_capital_serial (id, ref_id, ref_type,
        capital_id, old_balance, old_can_cash,
        new_balance, new_can_cash, create_time
        )
        values (#{id,jdbcType=INTEGER}, #{ref_id,jdbcType=VARCHAR}, #{ref_type,jdbcType=INTEGER},
        #{capital_id,jdbcType=INTEGER}, #{old_balance,jdbcType=INTEGER}, #{old_can_cash,jdbcType=INTEGER},
        #{new_balance,jdbcType=INTEGER}, #{new_can_cash,jdbcType=INTEGER}, #{create_time,jdbcType=TIMESTAMP}
        )
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <insert id="insertSelective" parameterType="com.all580.payment.entity.CapitalSerial">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into t_capital_serial
        <trim prefix="(" suffix=")" suffixOverrides=",">
            id,
            <if test="ref_id != null">
                ref_id,
            </if>
            <if test="ref_type != null">
                ref_type,
            </if>
            <if test="capital_id != null">
                capital_id,
            </if>
            <if test="old_balance != null">
                old_balance,
            </if>
            <if test="old_can_cash != null">
                old_can_cash,
            </if>
            <if test="new_balance != null">
                new_balance,
            </if>
            <if test="new_can_cash != null">
                new_can_cash,
            </if>
            <if test="create_time != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{id,jdbcType=INTEGER},
            <if test="ref_id != null">
                #{ref_id,jdbcType=VARCHAR},
            </if>
            <if test="ref_type != null">
                #{ref_type,jdbcType=INTEGER},
            </if>
            <if test="capital_id != null">
                #{capital_id,jdbcType=INTEGER},
            </if>
            <if test="old_balance != null">
                #{old_balance,jdbcType=INTEGER},
            </if>
            <if test="old_can_cash != null">
                #{old_can_cash,jdbcType=INTEGER},
            </if>
            <if test="new_balance != null">
                #{new_balance,jdbcType=INTEGER},
            </if>
            <if test="new_can_cash != null">
                #{new_can_cash,jdbcType=INTEGER},
            </if>
            <if test="create_time != null">
                #{create_time,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.all580.payment.entity.CapitalSerial">
        update t_capital_serial
        <set>
            <if test="ref_id != null">
                ref_id = #{ref_id,jdbcType=VARCHAR},
            </if>
            <if test="ref_type != null">
                ref_type = #{ref_type,jdbcType=INTEGER},
            </if>
            <if test="capital_id != null">
                capital_id = #{capital_id,jdbcType=INTEGER},
            </if>
            <if test="old_balance != null">
                old_balance = #{old_balance,jdbcType=INTEGER},
            </if>
            <if test="old_can_cash != null">
                old_can_cash = #{old_can_cash,jdbcType=INTEGER},
            </if>
            <if test="new_balance != null">
                new_balance = #{new_balance,jdbcType=INTEGER},
            </if>
            <if test="new_can_cash != null">
                new_can_cash = #{new_can_cash,jdbcType=INTEGER},
            </if>
            <if test="create_time != null">
                create_time = #{create_time,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.all580.payment.entity.CapitalSerial">
    update t_capital_serial
    set ref_id = #{ref_id,jdbcType=VARCHAR},
      ref_type = #{ref_type,jdbcType=INTEGER},
      capital_id = #{capital_id,jdbcType=INTEGER},
      old_balance = #{old_balance,jdbcType=INTEGER},
      old_can_cash = #{old_can_cash,jdbcType=INTEGER},
      new_balance = #{new_balance,jdbcType=INTEGER},
      new_can_cash = #{new_can_cash,jdbcType=INTEGER},
      create_time = #{create_time,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateSummary">
        update t_capital_serial set summary=#{summary} where id =#{id}
    </update>
    <insert id="insertBatch" parameterType="java.util.List" useGeneratedKeys="true">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT
            LAST_INSERT_ID()
        </selectKey>
        insert into t_capital_serial (id, ref_id, ref_type,capital_id, old_balance, old_can_cash,
        new_balance, new_can_cash,balance_type,can_cash_type)
        values
        <foreach collection="records" index="index" item="item" separator=",">
            (#{item.id}, #{item.ref_id}, #{item.ref_type},#{item.capital_id}, #{item.old_balance}, #{item.old_can_cash},
            #{item.new_balance}, #{item.new_can_cash}, #{item.balance_type}, #{item.can_cash_type})
        </foreach>
    </insert>

    <select id="listByCapitalIdExport"  resultType="map">
        select * from(
        select
        c.id,c.ref_id,c.ref_type, c.create_time as create_time, truncate((c.new_balance-c.old_balance)/100,2) as balance_add,truncate(( c.new_can_cash-c.old_can_cash)/100,2) as
        can_cash_add,p.name as change_type ,truncate(new_balance/100,2) new_balance, CASE WHEN c.new_balance-c.old_balance >0 THEN '收入' else '支出' end as balance_status
        ,CASE WHEN c.new_balance-c.old_balance >0 THEN '0' else '1' end as balance_status_code,IFNULL(summary,'') as summary
        from t_capital_serial c
        LEFT JOIN t_payment_param p on c.ref_type=p.id
        where capital_id = #{capital_id,jdbcType=INTEGER}
        ) f  where 1=1
        <if test="type == 0">
            and balance_add !=0
        </if>
        <if test="type == 1">
            and can_cash_add !=0
        </if>
        <if test="balance_status != null  and balance_status != ''">
            and   f.balance_status= #{balance_status}
        </if>
        <if test="start_date != null and end_date != null and start_date != '' and end_date != ''">
            and create_time between  #{start_date} and #{end_date}
        </if>
        <if test="ref_id != null  and ref_id != ''">
            and   ref_id=#{ref_id}
        </if>
        order by id desc
        <if test="start_record != null">
            limit #{start_record}
        </if>
        <if test="max_records != null">
            , #{max_records}
        </if>
    </select>
    <select id="listByCapitalId"  resultType="map">
        select * from(
        select
        c.id,c.ref_id,c.ref_type, c.create_time as create_time,c.new_balance-c.old_balance as balance_add,c.new_can_cash-c.old_can_cash as
        can_cash_add,p.name as change_type ,new_balance , CASE WHEN c.new_balance-c.old_balance >0 THEN '收入' else '支出' end as balance_status
        ,CASE WHEN c.new_balance-c.old_balance >0 THEN '0' else '1' end as balance_status_code,IFNULL(summary,'') as summary
        from t_capital_serial c
        LEFT JOIN t_payment_param p on c.ref_type=p.id
        where capital_id = #{capital_id,jdbcType=INTEGER}
        ) f  where 1=1

        <if test="type == 0">
            and balance_add !=0
        </if>
        <if test="type == 1">
            and can_cash_add !=0
        </if>
        <if test="balance_status != null  and balance_status != ''">
          and   f.balance_status= #{balance_status}
        </if>
        <if test="start_date != null and end_date != null and start_date != '' and end_date != ''">
            and create_time between  #{start_date} and #{end_date}
        </if>
        <if test="ref_id != null  and ref_id != ''">
            and   ref_id=#{ref_id}
        </if>
        order by id desc
        <if test="start_record != null">
            limit #{start_record}
        </if>
        <if test="max_records != null">
            , #{max_records}
        </if>
    </select>
    <select id="countByCapitalId"  resultType="java.lang.Integer">
        select count(1) from(
        select
        c.id,c.ref_id,c.ref_type, c.create_time as create_time,c.new_balance-c.old_balance as balance_add,c.new_can_cash-c.old_can_cash as
        can_cash_add,p.name as change_type ,new_balance , CASE WHEN c.new_balance-c.old_balance >0 THEN '收入' else '支出' end as balance_status
        from t_capital_serial c
        LEFT JOIN t_payment_param p on c.ref_type=p.id
        where capital_id = #{capital_id,jdbcType=INTEGER}
        ) f  where 1=1
        <if test="type == 0">
            and balance_add !=0
        </if>
        <if test="type == 1">
            and can_cash_add !=0
        </if>
        <if test="balance_status != null  and balance_status != ''">
            and   f.balance_status= #{balance_status}
        </if>
        <if test="start_date != null and end_date != null and start_date != '' and end_date != ''">
            and create_time between  #{start_date} and #{end_date}
        </if>
        <if test="ref_id != null  and ref_id != ''">
            and   ref_id=#{ref_id}
        </if>
        order by id desc

    </select>
</mapper>