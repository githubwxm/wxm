package com.all580.order.dao;

import com.all580.order.entity.GroupMember;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;
import java.util.Set;

public interface GroupMemberMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_group_member
     *
     * @mbggenerated Fri Dec 02 09:17:42 CST 2016
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_group_member
     *
     * @mbggenerated Fri Dec 02 09:17:42 CST 2016
     */
    int insert(GroupMember record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_group_member
     *
     * @mbggenerated Fri Dec 02 09:17:42 CST 2016
     */
    int insertSelective(GroupMember record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_group_member
     *
     * @mbggenerated Fri Dec 02 09:17:42 CST 2016
     */
    GroupMember selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_group_member
     *
     * @mbggenerated Fri Dec 02 09:17:42 CST 2016
     */
    int updateByPrimaryKeySelective(GroupMember record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_group_member
     *
     * @mbggenerated Fri Dec 02 09:17:42 CST 2016
     */
    int updateByPrimaryKey(GroupMember record);

    /**
     * 根据团队获取团队成员
     * @param groupId 团队ID
     * @return
     */
    List<GroupMember> selectByGroup(@Param("groupId") Integer groupId, @Param("lastId") Integer lastId);

    /**
     * 根据团队获取团队成员
     * @param groupId
     * @param ids
     * @return
     */
    List<GroupMember> selectByIds(@Param("groupId") Integer groupId, @Param("ids") List<Integer> ids);

    /**
     * 根据团队获取团队成员ID
     * @param groupId 团队ID
     * @return
     */
    Set<Integer> selectIdsByGroup(@Param("groupId") Integer groupId);

    /**
     * 根据团队删除该团队所有成员
     * @param groupId 团队ID
     * @return
     */
    int deleteByGroup(@Param("groupId") Integer groupId);

    /**
     * 统计团队成员数量
     * @param group_id 团队ID
     * @param name 游客姓名
     * @param card 游客证件号
     * @param phone 游客电话号码
     * @return
     */
    int countMemberList(@Param("group_id") Integer group_id,@Param("name") String name, @Param("card") String card, @Param("phone") String phone);

    /**
     * 查询团队成员列表
     * @param group_id 团队ID
     * @param name 游客姓名
     * @param card 游客证件号
     * @param phone 游客电话号码
     * @return
     */
    List<Map> queryMemberList(@Param("group_id") Integer group_id,@Param("name") String name, @Param("card") String card, @Param("phone") String phone, @Param("record_start") Integer record_start , @Param("record_count") Integer record_count);

    /**
     * 查询团队成员列表不分页
     * @param group_id 团队ID
     * @return
     */
    List<Map> queryMemberNoPageList(@Param("group_id") Integer group_id);

    /**
     * 查询订单团队成员列表不分页
     * @param suborderid 子订单ID
     * @param name 游客姓名
     * @param card 游客证件号
     * @param phone 游客电话号码
     * @return
     */
    List<Map> queryOrderMember(@Param("suborderid") Integer suborderid,@Param("name") String name,@Param("card") String card,@Param("phone") String phone);
}